package database

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"os"
	"strconv"
	"time"

	// "github.com/google/uuid"
	"github.com/lithammer/shortuuid/v4"
	_ "github.com/tursodatabase/libsql-client-go/libsql"
)

// #region Structs/Types

type EventType string

type EventEntry struct {
	// The unique identifier for the event, generated by the google/uuid package.
	ID string `json:"id"`

	// The type of event. E.g. mouse-click, mouse-move, key-down, key-up, etc.
	Type EventType `json:"type"`

	// The data associated with the event. E.g. mouse coordinates, key pressed, etc.
	Data string `json:"data"`

	// The timestamp of the event.
	Timestamp string `json:"timestamp"`
}

type TursoDB interface {
	Health() map[string]string

	Close() error

	CreateEvent(e EventEntry) (EventEntry, error)

	GetEventByID(id string) (EventEntry, error)

	GetEventsByType(eventType EventType) ([]EventEntry, error)

	GetEvents() ([]EventEntry, error)

	GetLatestEvents(maxEntries int) ([]EventEntry, error)
}

type tursoService struct {
	db *sql.DB
}

// #endregion Structs/Types

// #region Constants/Variables

const (
	// The EventType for when a user clicks the left or right mouse button.
	MouseClick EventType = "mouse-click"

	// The EventType for when a user moves the mouse.
	MouseMove EventType = "mouse-move"
	KeyDown   EventType = "key-down"
	KeyUp     EventType = "key-up"
	KeyHold   EventType = "key-hold"
)

var (
	// The URL for the Turso database.
	dbUrl = os.Getenv("TURSO_DATABASE_URL")

	// SQL query to insert an event into the Events table.
	insertEventQuery = "INSERT INTO Events (ID, Type, Data, Timestamp) VALUES (?, ?, ?, ?)"
)

// #endregion Constants/Variables

// Creates a new Event entry with a unique ID and timestamp. Returns the Event
// entry with the updated fields.
func initEventEntry(e EventEntry) EventEntry {
	e.ID = shortuuid.New()
	e.Timestamp = time.Now().UTC().Format(time.RFC3339Nano)

	return e
}

// Creates a new TursoDB instance and returns it. The database URL is read from
// the TURSO_DATABASE_URL environment variable. If the connection fails then an
// error is printed to the console and nil is returned.
func New() TursoDB {
	fmt.Println("[NewTurso()]: Connecting to Turso database at", dbUrl)

	db, err := sql.Open("libsql", dbUrl)
	if err != nil {
		fmt.Println("Error opening database", err)
		return nil
	}

	return &tursoService{db: db}
}

// #region Route Helpers

// Returns a map of health status information. The keys and values in the map
// are service-specific.
func (s *tursoService) Health() map[string]string {
	ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)
	defer cancel()

	stats := make(map[string]string)

	// Ping the database
	err := s.db.PingContext(ctx)
	if err != nil {
		stats["status"] = "down"
		stats["error"] = fmt.Sprintf("db down: %v", err)
		log.Fatalf(fmt.Sprintf("db down: %v", err)) // Log the error and terminate the program
		return stats
	}

	// Database is up, add more statistics
	stats["status"] = "up"
	stats["message"] = "It's healthy"

	// Get database stats (like open connections, in use, idle, etc.)
	dbStats := s.db.Stats()
	stats["open_connections"] = strconv.Itoa(dbStats.OpenConnections)
	stats["in_use"] = strconv.Itoa(dbStats.InUse)
	stats["idle"] = strconv.Itoa(dbStats.Idle)
	stats["wait_count"] = strconv.FormatInt(dbStats.WaitCount, 10)
	stats["wait_duration"] = dbStats.WaitDuration.String()
	stats["max_idle_closed"] = strconv.FormatInt(dbStats.MaxIdleClosed, 10)
	stats["max_lifetime_closed"] = strconv.FormatInt(dbStats.MaxLifetimeClosed, 10)

	// Evaluate stats to provide a health message
	if dbStats.OpenConnections > 40 { // Assuming 50 is the max for this example
		stats["message"] = "The database is experiencing heavy load."
	}

	if dbStats.WaitCount > 1000 {
		stats["message"] = "The database has a high number of wait events, indicating potential bottlenecks."
	}

	if dbStats.MaxIdleClosed > int64(dbStats.OpenConnections)/2 {
		stats["message"] = "Many idle connections are being closed, consider revising the connection pool settings."
	}

	if dbStats.MaxLifetimeClosed > int64(dbStats.OpenConnections)/2 {
		stats["message"] = "Many connections are being closed due to max lifetime, consider increasing max lifetime or revising the connection usage pattern."
	}

	return stats
}

// Terminates the database connection, returning an error if the connection
// cannot be closed.
func (s *tursoService) Close() error {
	return s.db.Close()
}

// Creates a new Event entry in the database. Returns the full Event entry if
// successful, or an error if the operation fails.
func (s *tursoService) CreateEvent(e EventEntry) (EventEntry, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 500*time.Millisecond)
	defer cancel()

	stmt, err := s.db.Prepare(insertEventQuery)
	if err != nil {
		return EventEntry{}, err
	}

	fe := initEventEntry(e)
	_, err = stmt.ExecContext(ctx, fe.ID, e.Type, e.Data, fe.Timestamp)
	if err != nil {
		return EventEntry{}, err
	}

	return fe, nil
}

// Create multiple Event entries in the database. Returns a slice of the events
// that were created if successful, or an error if the operation fails.
func (s *tursoService) CreateEvents(events []EventEntry) ([]EventEntry, error) {
	// Create a timeout duration of 500ms per event.
	timeoutDuration := time.Duration(500*len(events)) * time.Millisecond

	ctx, cancel := context.WithTimeout(context.Background(), timeoutDuration)
	defer cancel()

	var newEvents []EventEntry
	stmt, err := s.db.Prepare(insertEventQuery)
	if err != nil {
		return nil, err
	}

	for _, e := range events {
		fe := initEventEntry(e)
		_, err := stmt.ExecContext(ctx, fe.ID, fe.Type, fe.Data, fe.Timestamp)
		if err != nil {
			return nil, err
		}

		newEvents = append(newEvents, fe)
	}

	return newEvents, nil
}

// Retrieves an Event entry from the DB with the given ID. Returns the Event
// entry if found, or an error if the operation fails.
func (s *tursoService) GetEventByID(id string) (EventEntry, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)
	defer cancel()

	query := "SELECT ID, Type, Data, Timestamp FROM Events WHERE ID = ?"
	row := s.db.QueryRowContext(ctx, query, id)

	var event EventEntry
	err := row.Scan(&event.ID, &event.Type, &event.Data, &event.Timestamp)
	if err != nil {
		return EventEntry{}, err
	}

	return event, nil
}

// Retrieves all Events that have the given type. Returns a slice of Event
// entries if found, or an error if the operation fails.
func (s *tursoService) GetEventsByType(eventType EventType) ([]EventEntry, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)
	defer cancel()

	query := "SELECT ID, Type, Data, Timestamp FROM Events WHERE Type = ?"
	rows, err := s.db.QueryContext(ctx, query, eventType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var events []EventEntry
	for rows.Next() {
		var event EventEntry
		err := rows.Scan(&event.ID, &event.Type, &event.Data, &event.Timestamp)
		if err != nil {
			return nil, err
		}

		events = append(events, event)
	}

	return events, nil
}

// Retrieves all Event entries from the DB as a slice of Event entries if found,
// or an error if the operation fails.
//
// !!WARNING!! This function is not recommended for use in production as it may
// return a large number of entries and consume a lot of memory.
func (s *tursoService) GetEvents() ([]EventEntry, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)
	defer cancel()

	query := "SELECT ID, Type, Data, Timestamp FROM Events"
	rows, err := s.db.QueryContext(ctx, query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var events []EventEntry
	for rows.Next() {
		var event EventEntry
		err := rows.Scan(&event.ID, &event.Type, &event.Data, &event.Timestamp)
		if err != nil {
			return nil, err
		}

		events = append(events, event)
	}

	return events, nil
}

// Retrieves the latest X Event entries from the DB sorted by timestamp in
// descending order where X is the max number of entries to return. Returns
// a slice of Event entries if found, or an error if the operation fails.
func (s *tursoService) GetLatestEvents(maxEntries int) ([]EventEntry, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)
	defer cancel()

	query := "SELECT ID, Type, Data, Timestamp FROM Events ORDER BY Timestamp DESC LIMIT ?"
	rows, err := s.db.QueryContext(ctx, query, maxEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var events []EventEntry
	for rows.Next() {
		var event EventEntry
		err := rows.Scan(&event.ID, &event.Type, &event.Data, &event.Timestamp)
		if err != nil {
			return nil, err
		}

		events = append(events, event)
	}

	return events, nil
}

// #endregion Route Helpers

// Create the Events table if it doesn't exist. If an error occurs, it will be
// printed to the console and returned.
func CreateEventsTable(db *sql.DB) error {
	_, err := db.Exec(`CREATE TABLE IF NOT EXISTS Events (
		ID TEXT NOT NULL PRIMARY KEY,
		Type TEXT NOT NULL,
		Data TEXT NOT NULL,
		Timestamp TEXT NOT NULL
	)`)
	if err != nil {
		fmt.Println("Error creating Events table:", err)
		return err
	}

	return nil
}
